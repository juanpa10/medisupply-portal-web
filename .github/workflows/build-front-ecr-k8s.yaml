name: Build & Push to ECR (Kubernetes-Web)

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}           # ej: us-east-1
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}   # ej: medisupply

jobs:
  build_push:
    name: Build & Push web image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # (Tu Dockerfile en la raíz del front: Node->Nginx)
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker metadata (web)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}
          tags: |
            type=sha,prefix=k8s-web-${{ github.sha }}
            type=raw,value=k8s-web-latest,enable=true

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push (web)
        uses: docker/build-push-action@v6
        with:
          context: ./meddisupply-app
          file: ./meddisupply-app/Dockerfile
          push: true
          platforms: linux/amd64
          provenance: false
          sbom: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ▶️ Dispara deploy en el repo del BACK (orquestador) 
      - name: Trigger deploy in backend repo
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.INFRA_REPO_TOKEN }}   # PAT con acceso al repo del back
          repository: juanpa10/medisupply-backend-micros  
          event-type: deploy-from-front
          client-payload: '{"web_sha":"${{ github.sha }}"}'
