name: CI & CD Angular Portal â†’ AWS ECR

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: medisupply
  IMAGE_PREFIX: portal-web
  APP_DIR: meddisupply-app   # <-- usa el nombre EXACTO de tu carpeta

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # AWS OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Tags para ECR
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}
          tags: |
            type=sha,prefix=${{ env.IMAGE_PREFIX }}-
            type=ref,event=branch,prefix=${{ env.IMAGE_PREFIX }}-
            type=raw,value=${{ env.IMAGE_PREFIX }}-latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ env.APP_DIR }}
          file: ./${{ env.APP_DIR }}/Dockerfile
          push: true
          platforms: linux/amd64
          provenance: false
          sbom: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  deploy:
      needs: build_and_push
      runs-on: ubuntu-latest
      permissions:
        id-token: write
        contents: read
      env:
        AWS_REGION: us-east-1
        CLUSTER: medisupply
        SERVICE: portal-web-svc
      steps:
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
            aws-region: ${{ env.AWS_REGION }}

        - name: Force new deployment
          run: |
            aws ecs update-service --cluster "$CLUSTER" --service "$SERVICE" --force-new-deployment